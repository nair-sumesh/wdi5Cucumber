"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.Logger = void 0;
var coloredConsole_1 = require("./coloredConsole");
var Logger = /** @class */ (function () {
    function Logger(sPrefix) {
        if (sPrefix === void 0) { sPrefix = "wdi5"; }
        this.logLevel = "error";
        this.prefix = "[".concat(sPrefix, "]");
    }
    Logger.getInstance = function (sPrefix) {
        if (sPrefix === void 0) { sPrefix = "wdi5"; }
        if (Logger.instance === null || !Logger.instance[sPrefix]) {
            Logger.instance[sPrefix] = new Logger(sPrefix);
        }
        return Logger.instance[sPrefix];
    };
    Logger.prototype.getLogLevel = function () {
        return this.logLevel;
    };
    Logger.prototype.setLogLevel = function (level) {
        this.logLevel = level;
    };
    Logger.prototype.error = function (msg) {
        var _ = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _[_i - 1] = arguments[_i];
        }
        if (this.logLevel !== "silent") {
            coloredConsole_1.chalk.red.apply(coloredConsole_1.chalk, __spreadArray([this.prefix, msg], __read(_), false));
        }
    };
    Logger.prototype.warn = function (msg) {
        var _ = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _[_i - 1] = arguments[_i];
        }
        if (this.logLevel !== "silent") {
            coloredConsole_1.chalk.yellow.apply(coloredConsole_1.chalk, __spreadArray([this.prefix, msg], __read(_), false));
        }
    };
    Logger.prototype.info = function (msg) {
        var _ = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _[_i - 1] = arguments[_i];
        }
        if (this.logLevel === "verbose") {
            coloredConsole_1.chalk.blue.apply(coloredConsole_1.chalk, __spreadArray([this.prefix, msg], __read(_), false));
        }
    };
    Logger.prototype.success = function (msg) {
        var _ = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _[_i - 1] = arguments[_i];
        }
        if (this.logLevel === "verbose") {
            coloredConsole_1.chalk.green.apply(coloredConsole_1.chalk, __spreadArray([this.prefix, msg], __read(_), false));
        }
    };
    Logger.prototype.log = function (msg) {
        var _ = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _[_i - 1] = arguments[_i];
        }
        if (this.logLevel !== "silent") {
            coloredConsole_1.chalk["default"].apply(coloredConsole_1.chalk, __spreadArray([this.prefix, msg], __read(_), false));
        }
    };
    Logger.prototype.debug = function (msg) {
        var _ = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _[_i - 1] = arguments[_i];
        }
        if (this.logLevel === "verbose") {
            coloredConsole_1.chalk.magenta.apply(coloredConsole_1.chalk, __spreadArray([this.prefix, msg], __read(_), false));
        }
    };
    Logger.instance = {};
    return Logger;
}());
exports.Logger = Logger;
//# sourceMappingURL=Logger.js.map