"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
exports.__esModule = true;
exports.WDI5FE = void 0;
var testLibrary_1 = require("../../client-side-js/testLibrary");
var Logger_1 = require("./Logger");
var Logger = Logger_1.Logger.getInstance();
var commonFunctions = ["and", "then", "when"];
function createProxy(myObj, type, methodCalls, pageKeys) {
    var thisProxy = new Proxy(myObj, {
        get: function (obj, prop) {
            if (pageKeys.indexOf(prop) !== -1) {
                myObj.currentMethodCall = { type: type, target: prop, methods: [] };
                methodCalls.push(myObj.currentMethodCall);
                return thisProxy;
            }
            else if (commonFunctions.indexOf(prop) !== -1) {
                myObj.currentMethodCall.methods.push({ name: prop, accessor: true });
                return thisProxy;
            }
            return function () {
                var fnArgs = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    fnArgs[_i] = arguments[_i];
                }
                myObj.currentMethodCall.methods.push({ name: prop, args: fnArgs });
                return thisProxy;
            };
        }
    });
    return thisProxy;
}
var WDI5FE = /** @class */ (function () {
    function WDI5FE(appConfig, browserInstance) {
        this.appConfig = appConfig;
        this.browserInstance = browserInstance;
    }
    WDI5FE.initialize = function (appConfig, browserInstance) {
        if (browserInstance === void 0) { browserInstance = browser; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, testLibrary_1.loadFELibraries)(browserInstance)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, (0, testLibrary_1.initOPA)(appConfig, browserInstance)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, new WDI5FE(appConfig, browserInstance)];
                }
            });
        });
    };
    WDI5FE.prototype.execute = function (fnFunction) {
        return __awaiter(this, void 0, void 0, function () {
            var methodCalls, reservedPages, Given, Then, When, methodCalls_1, methodCalls_1_1, methodCall, _a, type_1, content_1, e_1_1, _b, type, content, feLogs, feLogs_1, feLogs_1_1, log;
            var e_1, _c, e_2, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        methodCalls = [];
                        reservedPages = Object.keys(this.appConfig).concat();
                        Given = createProxy({}, "Given", methodCalls, reservedPages);
                        Then = createProxy({}, "Then", methodCalls, reservedPages);
                        When = createProxy({}, "When", methodCalls, reservedPages);
                        fnFunction(Given, Then, When); // PrepareQueue
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 6, 7, 8]);
                        methodCalls_1 = __values(methodCalls), methodCalls_1_1 = methodCalls_1.next();
                        _e.label = 2;
                    case 2:
                        if (!!methodCalls_1_1.done) return [3 /*break*/, 5];
                        methodCall = methodCalls_1_1.value;
                        return [4 /*yield*/, (0, testLibrary_1.addToQueue)(methodCall.type, methodCall.target, methodCall.methods, this.browserInstance)];
                    case 3:
                        _a = __read.apply(void 0, [_e.sent(), 2]), type_1 = _a[0], content_1 = _a[1];
                        if (type_1 !== "success") {
                            throw content_1;
                        }
                        _e.label = 4;
                    case 4:
                        methodCalls_1_1 = methodCalls_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _e.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (methodCalls_1_1 && !methodCalls_1_1.done && (_c = methodCalls_1["return"])) _c.call(methodCalls_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8: return [4 /*yield*/, (0, testLibrary_1.emptyQueue)(this.browserInstance)];
                    case 9:
                        _b = __read.apply(void 0, [_e.sent(), 3]), type = _b[0], content = _b[1], feLogs = _b[2];
                        if (type !== "success") {
                            throw content;
                        }
                        try {
                            for (feLogs_1 = __values(feLogs), feLogs_1_1 = feLogs_1.next(); !feLogs_1_1.done; feLogs_1_1 = feLogs_1.next()) {
                                log = feLogs_1_1.value;
                                Logger.success("[test library] ".concat(log));
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (feLogs_1_1 && !feLogs_1_1.done && (_d = feLogs_1["return"])) _d.call(feLogs_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return WDI5FE;
}());
exports.WDI5FE = WDI5FE;
//# sourceMappingURL=wdi5-fe.js.map